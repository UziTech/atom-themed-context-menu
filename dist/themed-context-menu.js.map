{
  "version": 3,
  "sources": ["../src/main.ts", "../src/MenuItem.ts", "../src/ThemedContextMenu.ts", "../src/ContextElement.ts"],
  "sourcesContent": ["import { ThemedContextMenu } from \"./ThemedContextMenu\"\nimport { ContextElement } from \"./ContextElement\"\n\nconst tcm = new ThemedContextMenu()\nvar elemList: ContextElement[] = []\n\nexport async function activate() {\n    console.log(\"hello!\")\n    // gather context element into element list and hijack the event listener\n    gatherContextElements()\n    hijackAllContextMenus()\n}\n\nexport function deactivate() {\n    // release the event listeners\n    unhijackAllContextMenus()\n}\n\nfunction gatherContextElements() {\n    // ask atom for context menu items and dom selectors\n    let contextMenuItems = (atom.contextMenu as any).itemSets\n\n    let workingList: ContextElement[] = []\n    for (let i = 0; i < contextMenuItems.length; i++) {\n        let triggeringItem = contextMenuItems[i]\n\n        // get all dom elements that match selector\n        let domElems = document.querySelectorAll(triggeringItem.selector)\n\n        // create context element objects and add to elemlist\n        domElems.forEach((item) =>\n            workingList.push(new ContextElement(item, triggeringItem.items)),\n        )\n    }\n\n    // remove duplicates from elemlist and assign to public variable\n    elemList = pruneElements(workingList)\n}\n\n// wrapper function to ask all context elements to hijack the context menu event\nfunction hijackAllContextMenus() {\n    elemList.forEach((item) => item.hijackContextMenu(tcm))\n}\n\n// wrapper function to ask all context elements to release the context menu event\nfunction unhijackAllContextMenus() {\n    elemList.forEach((item) => item.unhijackContextMenu(tcm))\n}\n\n// join different context menu item sets for same dom elements\nfunction pruneElements(elements: ContextElement[]) {\n    for (let i = 0; i < elements.length; i++) {\n        for (let j = i + 1; j < elements.length; j++) {\n            if (elements[i].getElem() === elements[j].getElem()) {\n                elements[i].addItems(elements[j])\n                elements.splice(j, 1)\n            }\n        }\n    }\n\n    return elements\n}\n", "import EventEmitter from \"events\"\nimport { ContextMenuItem } from \"./types\"\nimport { ThemedContextMenu } from \"./ThemedContextMenu\"\n\n// handler for the items shown in the context menu, be it a separator or a command\nexport class MenuItem {\n    private element: HTMLHRElement | HTMLDivElement\n    private command?: string\n    private commandDetail?: string\n    private selected: boolean = false\n    private parent: ThemedContextMenu\n    private height: number\n\n    private constructor(\n        element: HTMLHRElement | HTMLDivElement,\n        parent: ThemedContextMenu,\n        height: number,\n    ) {\n        this.element = element\n        this.parent = parent\n        this.height = height\n\n        this.element.addEventListener(\"click\", (e) =>\n            this.onMouseClick(e as MouseEvent),\n        )\n    }\n\n    // static function wrapper to create a MenuItem object from a ContextMenuItem object\n    public static createMenuItem(\n        item: ContextMenuItem,\n        parent: ThemedContextMenu,\n    ) {\n        // early return for separators\n        if (item.type === \"separator\") {\n            return new MenuItem(document.createElement(\"hr\"), parent, 7)\n        }\n\n        // create base menu item div element and create menu item object from base div\n        const divElem = document.createElement(\"div\")\n        divElem.classList.add(\"menu-item\")\n        const self = new MenuItem(divElem, parent, 23)\n\n        // create menu item label span\n        const menuItemName = document.createElement(\"span\")\n        menuItemName.classList.add(\"menu-item-name\")\n        // if it doesnt have a label, what is it?\n        // i guess a separator wont have a label, but other than that?\n        // should i add an early return case for this?\n        menuItemName.innerHTML = item.label ? item.label : \"\"\n\n        // create menu item key stroke span\n        const menuItemKey = document.createElement(\"span\")\n        menuItemKey.classList.add(\"menu-item-key\")\n\n        // append menu item elements to base menu item div\n        divElem.appendChild(menuItemName)\n        divElem.appendChild(menuItemKey)\n\n        // if it doesnt have a command it might be a submenu\n        if (item.command !== undefined) {\n            // add command data to menu item object\n            self.command = item.command\n            self.commandDetail = item.commandDetail\n\n            // if it has a command, it might have a keymap, so search for it\n            const keyStrokes = atom.keymaps.findKeyBindings({\n                command: item.command,\n            })\n\n            // if it has a keymap, add it to the item key span element\n            if (keyStrokes.length > 0) {\n                menuItemKey.innerHTML =\n                    keyStrokes[keyStrokes.length - 1].keystrokes\n            }\n        }\n\n        return self\n    }\n\n    // on click, execute command and hide the context menu\n    private onMouseClick(e: MouseEvent) {\n        e.stopPropagation()\n        this.execCommand()\n        this.parent.deleteContextMenu()\n    }\n\n    private async execCommand(): Promise<void> {\n        if (this.command === undefined) {\n            return\n        }\n\n        let target =\n            (atom.workspace.getActiveTextEditor() as any)?.getElement() ||\n            (atom.workspace.getActivePane() as any).getElement()\n\n        await (atom.commands as any).dispatch(\n            target,\n            this.command,\n            this.commandDetail,\n        )\n    }\n\n    public getElement() {\n        return this.element\n    }\n\n    public getHeight() {\n        return this.height\n    }\n}\n", "import { MenuItem } from \"./MenuItem\"\nimport { MouseClick } from \"./types\"\n\nexport class ThemedContextMenu {\n    private activeContextMenu: HTMLDivElement\n    private visible: boolean = false\n    private children: MenuItem[] = []\n    private lastClick: MouseClick | undefined\n\n    constructor() {\n        // add click listener to clear the context menu\n        let aws = document.querySelector(\"atom-workspace\")\n        aws?.addEventListener(\"click\", (e) =>\n            this.onMouseClick(e as MouseEvent),\n        )\n\n        // create the context menu, but make it invisible\n        this.activeContextMenu = document.createElement(\"div\")\n        this.activeContextMenu.classList.add(\"themed-context-menu\")\n        this.activeContextMenu.classList.add(\"invisible\")\n        aws?.appendChild(this.activeContextMenu)\n    }\n\n    displayContextMenu(e: MouseClick, items) {\n        // if mouse event is different to last, clear context menu\n        if (this.lastClick !== undefined && this.lastClick !== e) {\n            this.deleteContextMenu()\n        }\n\n        // set last click event to current parameter,\n        // make context menu visible\n        this.lastClick = e\n        this.activeContextMenu.classList.remove(\"invisible\")\n\n        // add context menu items to context menu\n        items.forEach((element) => {\n            this.addChild(element)\n        })\n\n        // move context menu position to mouse event position\n        this.activeContextMenu.setAttribute(\n            \"style\",\n            this.getPositionStyleString(e),\n        )\n    }\n\n    // adds a context menu item to context menu\n    private addChild(item) {\n        const mitem = MenuItem.createMenuItem(item, this)\n        this.children.push(mitem)\n        this.activeContextMenu?.appendChild(mitem.getElement())\n    }\n\n    private onMouseClick(e) {\n        this.deleteContextMenu()\n    }\n\n    // generates a style string that positions the context menu next to\n    // mouse event, while also preventing it from overflowing\n    private getPositionStyleString(e: MouseClick) {\n        let x = e.clientX + 10 + 5\n        let y = e.clientY + 5\n\n        x = Math.min(x, window.innerWidth - 310)\n        y = Math.min(y, window.innerHeight - this.getHeight() - 10)\n\n        return \"top:\" + y + \"px; left:\" + x + \"px\"\n    }\n\n    // calculate context menu height for positioning function\n    private getHeight(): number {\n        return this.children\n            .map((item) => item.getHeight())\n            .reduce(function (a, b) {\n                return a + b\n            })\n    }\n\n    deleteContextMenu() {\n        this.visible = false\n        this.children = []\n        this.activeContextMenu.classList.add(\".invisible\")\n        this.lastClick = undefined\n        this.removeAllChildNodes()\n    }\n\n    private removeAllChildNodes() {\n        while (this.activeContextMenu.firstChild) {\n            this.activeContextMenu.removeChild(\n                this.activeContextMenu.firstChild,\n            )\n        }\n    }\n}\n", "import { ContextMenuItem, MouseClick } from \"./types\"\nimport { ThemedContextMenu } from \"./ThemedContextMenu\"\n\nexport class ContextElement {\n    private elem: HTMLElement\n    private items: ContextMenuItem[] = []\n\n    constructor(elem, items) {\n        this.elem = elem\n        this.addItems(items)\n    }\n\n    // add listener to html element to 'hijack' the context menu event\n    hijackContextMenu(tcm: ThemedContextMenu) {\n        this.elem.addEventListener(\"contextmenu\", (e) =>\n            this.onContextMenu(e, tcm),\n        )\n    }\n\n    // release listener to html element\n    unhijackContextMenu(tcm: ThemedContextMenu) {\n        this.elem.removeEventListener(\"contextmenu\", (e) =>\n            this.onContextMenu(e, tcm),\n        )\n    }\n\n    // wrapper function for context menu event so listener can be removed on deactivate\n    private onContextMenu(e, tcm: ThemedContextMenu) {\n        // prevent native context menu\n        e.preventDefault()\n        e.stopPropagation()\n\n        //call to request themed context menu\n        tcm.displayContextMenu(e, this.items)\n    }\n\n    // wrapper function to add context element items into current element items\n    addItems(contelem: ContextElement) {\n        contelem.getItems().forEach((element) => this.addItem(element))\n    }\n\n    private addItem(newItem) {\n        if (newItem.type) {\n            // prevent starting with a separator\n            if (this.items.length === 0) {\n                return\n            }\n\n            // prevent two separators in a row\n            if (!this.items[this.items.length - 1].type) {\n                this.items.push(newItem)\n            }\n        } else {\n            // prevent duplicates\n            let similarComms = this.items.filter(\n                (item) => item.command === newItem.command,\n            )\n            if (similarComms.length === 0) {\n                this.items.push(newItem)\n            }\n        }\n    }\n\n    getElem() {\n        return this.elem\n    }\n\n    getItems() {\n        return this.items\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
